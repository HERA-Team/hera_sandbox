#!/usr/bin/env python
#
#  stack_fits.py
#  
#
#  Created by Danny Jacobs on 11/14/09.
#  PAPER Project
#

import aipy as a, numpy as n, pylab as p,math as m
import sys, optparse, pyfits as pf,ephem
from aipy.img import word_wrap
"""
Fix WCS coordinates in fits files generated by AIPY<= 0.9.0 
Warning: Always overwrites output file.
"""
o = optparse.OptionParser()
a.scripting.add_standard_options(o)
o.add_option('-v',dest='verb',action='store_true',default=False,
    help='Print more')
o.add_option('-l',dest='list',action='store_true',
    help="List output files and exit silently. Does not write to disk.")
opts, args = o.parse_args(sys.argv[1:])

#cubedata = []


if opts.list:
    for file in args:
        print '.'.join(file.split('.')[:-1])+'c.fits',
    sys.exit()

for file in args:
    outfile = '.'.join(file.split('.')[:-1])+'c.fits'
    print file + " > " + outfile
    hdulist = pf.open(file)
    hdu = hdulist[0]
    history ="""fix_dcj_fits.py: fixed CRPIX1 and CRPIX2 to 
    now reference the center pixel as intended.  Also fixed DEC--SIN and reversed
    the direction of the RA. Frequency units of Hz. Swap the RA and DEC axes."""
    history = ' '.join(history.split('\n'))
    wlines = a.img.word_wrap(history,70,5,10,'#').split('\n')
    for l in wlines:
        hdu.header.add_history(l)
#     history = word_wrap(history,70,5,10,'#')
#    history = history.split("\n")
#    for line in history:
#        hdu.header.add_history(line)
    if hdu.header['CRPIX1']==hdu.header['NAXIS1']: 
        hdu.header['CRPIX1'] = hdu.header['CRPIX1']/2 +1
    else: hdu.header['CRPIX1'] +=1
    if hdu.header['CRPIX2']==hdu.header['NAXIS2']:
        hdu.header['CRPIX2'] = hdu.header['CRPIX2']/2 +1
    else: hdu.header['CRPIX2'] +=1
    hdu.header['CTYPE2'] = 'DEC--SIN'
#    hdu.header['CRPIX3'] = 1
    hdu.header['CDELT1'] *= -1
#    hdu.header['CRVAL3'] *= 1e9
#    hdu.header['CDELT3'] *= 1e9
    hdu.header.update('EPOCH',2000.0,'Epoch of coordinate system')
    shape = hdu.data.shape
    hdu.data = hdu.data.squeeze().transpose()
    hdu.data.shape = shape
#    hdu.header.update('CUNIT3','GHz','Units of frequency axis')
    hdulist[0] = hdu
    if opts.verb: print hdulist[0].header
    hdulist.writeto(outfile,clobber=True)
#    data, kwds = a.img.from_fits(slice)
#    print ephem.hours(kwds['ra'] * a.img.deg2rad),
#    print ephem.degrees(kwds['dec'] * a.img.deg2rad)
#    cubedata.append(data)
#cubedata = n.dstack(cubedata)
#a.img.to_fits(opts.outfile,cubedata,axes=kwds['axes'],ra=kwds['ra'],
#    dec=kwds['dec'],d_ra=kwds['d_ra'],d_dec=kwds['d_dec'],freq=0,d_freq=1)
##file = pyfits.open(opts.outfile,mode='update')
#print 'created: '+opts.outfile
