import numpy as n, aipy as a,optparse,sys,os
from capo.dcj import file2jd
"""
applies mask files generated by omni_antplot.py 
input file: zen.2456949.49403.xx.uvcRRE
will look for mask file: zen.2456949.49403.xx.omni_output.mask.npz


"""

### Options ###
o = optparse.OptionParser()
o.set_usage('apply_omniflags.py [options] *RRE')
o.set_description(__doc__)
#o.add_option('-C',dest='cal',default='psa6622_v003',type='string',
#            help='Path and name of calfile.')
o.add_option('--maskdir',type=str,
    help='a directory to look in for mask files. when not set, assumes same as data file')
opts,args = o.parse_args(sys.argv[1:])
def filename_root(x):
    return '.'.join(x.split('.')[:-1])
def mfunc(uv,p,d,f):
    uvw,t,(i,j) = p
    pol = 'xx'
    i = str(i)+pol[0]
    j = str(j)+pol[1]
    t_int = n.round(t-jd)
    try:
        mask = n.logical_or(masks[i][t_int],masks[j][t_int])
        f = n.logical_or(f,mask)
        print '.'
    except(KeyError):
        try:
            mask = n.logical_or(masks[j][t_int],masks[i][t_int])
            f = n.logical_or(f,mask)
        except(KeyError):
            print "WARNING:",i,j,"not found in mask file. masking all"
            f = n.ones_like(f)
    return p,d,f
#find matching mask files
maskfiles = []
for filename in args:
    print filename
    if not os.path.exists(filename):
        print filename, "not found, skipping"
        continue
    outfile = filename+'M'
    print "->",outfile
    if os.path.exists(outfile):
        print "exists... skipping"
        continue
    if not opts.maskdir is None:
        maskfile = opts.maskdir + filename_root(os.path.basename(filename))+'.omni_output.mask.npz'
    else:
        maskfile = filename_root(filename)+'.omni_output.mask.npz'
    if not os.path.exists(maskfile):
        print maskfile, "not found, skipping"
        continue

    #load maskfile
    masks = n.load(maskfile)
    uvi = a.miriad.UV(filename)
    jd = file2jd(filename)
    uvo = a.miriad.UV(outfile,status='new')
    uvo.init_from_uv(uvi)
    uvo.pipe(uvi,mfunc,raw=True)
    del(uvo)


