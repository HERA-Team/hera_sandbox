#! /usr/bin/env python
import aipy as a, numpy as n, pylab as p, optparse, sys
import beamuv

o = optparse.OptionParser()
o.set_usage('srcpredict.py -C [calfile] -s [src] [npzfile]')
o.add_option('-b','--beam',dest='beam',default='/data3/paper/pober/pgb/pgb16/pgb015/beam02.smoothe.npz',
    help='The beam npz file to use.')
a.scripting.add_standard_options(o, cal=True,src=True)
             
opts,args = o.parse_args(sys.argv[1:])

_coeffs = beamuv.coeffs_from_file(opts.beam)

k = opts.src
#k = '21:23:54.38_25:02:07.2'
#k = '20:14:17.81_23:33:42.8'
beamx = beamuv.BeamUV(_coeffs,.150,size=500,pol='x')
beamy = beamuv.BeamUV(_coeffs,.150,size=500,pol='y')
aa = a.cal.get_aa(opts.cal, n.array([.150]))
srclist, cutoff, catalogs = a.scripting.parse_srcs(k, opts.cat)
cat = a.cal.get_catalog(opts.cal,srclist)
cat.compute(aa)

lst = n.arange(0,2*n.pi,0.01)
jultime = 2445015+(lst/2/n.pi)
lsts = []

#Produce a sourcetrack
alt, az = [],[]
for i,t in enumerate(jultime):
    aa.set_jultime(t)
    lsts.append(aa.sidereal_time())
    cat[k].compute(aa)
    alt.append(cat[k].alt)
    az.append(cat[k].az)
alt = n.array(alt)
az = n.array(az)
x,y,z = a.coord.azalt2top((az, alt))
lsts=n.array(lsts)-2
lsts=n.where(lsts > 0,lsts,lsts+2*n.pi)

xtrack,ytrack=[],[]
for ix,iy,iz in zip(x,y,z):
    xtrack.append(beamx.response(n.array([ix]),n.array([iy]),n.array([iz]))**2)
    ytrack.append(beamy.response(n.array([ix]),n.array([iy]),n.array([iz]))**2)

#p.subplot(121)
#beamx.showtrack(x,y,z)
#p.subplot(122)
#beamy.showtrack(x,y,z)

#peak = []
for file in args:
    npz = n.load(file)
    times = []
    for t in npz['times']:
        aa.set_jultime(t)
        times.append(aa.sidereal_time())
    times=n.array(times)-2
    times=n.where(times > 0,times,times+2*n.pi)
    spec = n.mean(npz['spec'].real,axis=1)
    p.semilogy(n.array(times),spec,',')
    peak = n.max(spec)
#print peak[0],peak[2]

#xtrack=n.array(xtrack)*peak[2]
ytrack=n.array(ytrack)*peak/n.max(ytrack)

#p.semilogy(lsts,xtrack,'.',label='x')
p.semilogy(lsts,ytrack,'.',label='y')
p.legend()
p.show()
