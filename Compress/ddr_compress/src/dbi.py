from sqlalchemy import Column, String, Integer, ForeignKey, Float,func,DateTime,Enum,BigInteger
from sqlalchemy.orm import relationship, backref,sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import create_engine
from ddr_compress.scheduler import FILE_PROCESSING_STAGES
import aipy as a 
#Based on example here: http://www.pythoncentral.io/overview-sqlalchemys-expression-language-orm-queries/
Base = declarative_base()

dbinfo = {'username':'obs',
          'password':'\x50\x39\x6c\x73\x34\x52\x2a\x40',
          'hostip':'10.0.1.20',
          'port':5432,
          'dbname':'test'}


#########
# 
#   Useful helper functions 
#
#####
def jdpol2obsnum(jd,pol):
    """
    input: julian date float and pol string. 
    NOTE: rounds jd to the nearest 8 milliseconds
    output: a unique index
    """
    tjd = jd - 2440000.5  #use NASA's truncated julian date
    return int(tjd*1e10)*16+a.miriad.str2pol[pol]+10
def obsnum2jdpol(obsnum):
    """
    input: obsnum generated by jdpol2obsnum
    output: julian date and pol string
    """
    pol = a.miriad.pol2str[obsnum%16-10]
    tjd = float((obsnum - ((obsnum%16)-10))/1e10/16)
    jd = tjd + 2440000.5
    return jd,pol
def updateobsnum(context):
    """
    helper function for Observation sqlalchemy object.
    used to calculate the obsnum on creation of the record
    """
    return jdpol2obsnum(context.current_parameters['julian_date'],
                        context.current_parameters['pol'])
def md5sum(fname):
    """
    calculate the md5 checksum of a file whose filename entry is fname.
    """
    fname = fname.split(':')[-1]
    BLOCKSIZE=65536
    hasher=hashlib.md5()
    try:
        afile=open(fname, 'rb')
    except(IOError):
        afile=open("%s/visdata"%fname, 'rb')
    buf=afile.read(BLOCKSIZE)
    while len(buf) >0:
        hasher.update(buf)
        buf=afile.read(BLOCKSIZE)
    return hasher.hexdigest()

#############
#
#   The basic definition of our database
#
########
class Observation(Base):
    __tablename__ = 'observation'
    julian_date = Column(Float)
    pol = Column(String)
    obsnum = Column(BigInteger,default=updateobsnum,primary_key=True)
    status = Column(Enum(*FILE_PROCESSING_STAGES,name='FILE_PROCESSING_STAGES'))
    last_update = Column(DateTime,server_default=func.now(),onupdate=func.current_timestamp())
    length = Column(Float) #length of observation in fraction of a day
class File(Base):
    __tablename__ = 'file'
    filenum = Column(Integer, primary_key=True)
    filename = Column(String)
    host = Column(String)
    obsnum=Column(Integer,ForeignKey('observation.obsnum'))
    #this next line creates an attribute Observation.files which is the list of all
    #  files associated with this observation
    observation = relationship(Observation,backref=backref('files',uselist=True))
    md5sum = Column(Integer)



class databaseinterface(object):
    def __init__(self,test=False):
        """
        Connect to the database and initiate a session creator.
         or
        create a FALSE database
        """
        if test:
            self.engine = create_engine('sqlite:///')
            Base.metadata.bind = self.engine
            Base.metadata.create_all()
        else:
            self.engine = create_engine(
                    'mysql://{username}:{password}@{hostip}:{port}/{dbname}'.format(
                                dbinfo))
        self.Session = sessionmaker(bind=self.engine)
    def createdb(self):
        """
        creates the tables in the database. 
        """
        Base.metadata.bind = self.engine
        Base.metadata.create_all()
    def add_observation(self,julian_date,pol,length=10/60./24,status='UV-POT'):
        """
        create a new observation entry.
        returns: obsnum  (see obsnum2jdpol)
        """
        OBS = Observation(julian_date=julian_date,pol=pol,status=status,length=length)
        s = self.Session()
        s.add(OBS)
        s.commit()
        obsnum = OBS.obsnum
        s.close()
        return obsnum
    def get_neighbors(self,obsnum):
        """
        for now lets search for neighbors based on time
        formally, look for observations within 1.2 of the length of the input

        return: list of obsnums. Always len=2.  None indicates no neighbor
        """
        s = self.Session()
        OBS = s.query(Observation).filter(Observation.obsnum==obsnum).one()
        NEIGHBORS = s.query(Observation).filter(
                        func.abs(Observation.julian_date-OBS.julian_date)<(1.2*OBS.length),Observation.obsnum!=OBS.obsnum)
        neighborobsnums = [o.obsnum for o in NEIGHBORS]
        while len(neighborobsnums)<2:
            neighborobsnums.append(None)
        return neighborobsnums
    def add_file(self,obsnum,host,filename):
        """
        Add a file to the database and associate it with an observation.
        """
        FILE = File(filename=filename,host=host)
        #get the observation corresponding to this file
        s = self.Session()
        OBS = s.query(Observation).filter(obsnum==obsnum).one()
        FILE.observation =OBS  #associate the file with an observation
        s.add(FILE)
        s.commit()
        filenum = FILE.filenum #we gotta grab this before we close the session.
        s.close() #close the session
        return filenum
    def set_obs_status(self,obsnum,status):
        """
        change the satus of obsnum to status
        input: obsnum (key into the observation table, returned by add_observation and others)
        """
        s = self.Session()
        OBS = s.query(Observation).filter(obsnum==obsnum).one()
        OBS.status = status
        s.commit()
        s.close()
        return True
    def get_obs_status(self,obsnum):
        """
        retrieve the status of an observation
        """
        s = self.Session()
        OBS = s.query(Observation).filter(obsnum==obsnum).one()
        status = OBS.status
        s.commit()
        s.close()
        return status
        
